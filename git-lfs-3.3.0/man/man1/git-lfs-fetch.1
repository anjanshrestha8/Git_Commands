'\" t
.\"     Title: git-lfs-fetch
.\"    Author: [see the "AUTHOR(S)" section]
.\" Generator: Asciidoctor 2.0.18
.\"    Manual: \ \&
.\"    Source: \ \&
.\"  Language: English
.\"
.TH "GIT\-LFS\-FETCH" "1" "" "\ \&" "\ \&"
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.ss \n[.ss] 0
.nh
.ad l
.de URL
\fI\\$2\fP <\\$1>\\$3
..
.als MTO URL
.if \n[.g] \{\
.  mso www.tmac
.  am URL
.    ad l
.  .
.  am MTO
.    ad l
.  .
.  LINKSTYLE blue R < >
.\}
.SH "NAME"
git-lfs-fetch \- Download all Git LFS files for a given ref
.SH "SYNOPSIS"
.sp
\f(CRgit lfs fetch\fP [options] [<remote> [<ref>...]]
.SH "DESCRIPTION"
.sp
Download Git LFS objects at the given refs from the specified remote.
See DEFAULT REMOTE and DEFAULT REFS for what happens if you don\(cqt
specify.
.sp
This does not update the working copy.
.SH "OPTIONS"
.sp
\f(CR\-I <paths>\fP, \f(CR\-\-include=<paths>\fP
.RS 4
Specify lfs.fetchinclude just for this invocation; see
INCLUDE AND EXCLUDE.
.RE
.sp
\f(CR\-X <paths>\fP, \f(CR\-\-exclude=<paths>\fP
.RS 4
Specify lfs.fetchexclude just for this invocation; see
INCLUDE AND EXCLUDE.
.RE
.sp
\f(CR\-\-recent\fP
.RS 4
Download objects referenced by recent branches & commits in addition to those
that would otherwise be downloaded. See RECENT CHANGES.
.RE
.sp
\f(CR\-\-all\fP
.RS 4
Download all objects that are referenced by any commit reachable from the refs
provided as arguments. If no refs are provided, then all refs are fetched.
This is primarily for backup and migration purposes. Cannot be combined with
\-\-recent or \-\-include/\-\-exclude. Ignores any globally configured include and
exclude paths to ensure that all objects are downloaded.
.RE
.sp
\f(CR\-\-prune\fP, \f(CR\-p\fP
.RS 4
Prune old and unreferenced objects after fetching, equivalent to running \f(CRgit
lfs prune\fP afterwards. See git\-lfs\-prune(1) for more details.
.RE
.SH "INCLUDE AND EXCLUDE"
.sp
You can configure Git LFS to only fetch objects to satisfy references in
certain paths of the repo, and/or to exclude certain paths of the repo,
to reduce the time you spend downloading things you do not use.
.sp
In your Git configuration or in a \f(CR.lfsconfig\fP file, you may set either
or both of \f(CRlfs.fetchinclude\fP and \f(CRlfs.fetchexclude\fP to comma\-separated
lists of paths. If \f(CRlfs.fetchinclude\fP is defined, Git LFS objects will
only be fetched if their path matches one in that list, and if
\f(CRlfs.fetchexclude\fP is defined, Git LFS objects will only be fetched if
their path does not match one in that list. Paths are matched using
wildcard matching as per gitignore(5).
.sp
Note that using the command\-line options \f(CR\-I\fP and \f(CR\-X\fP override the
respective configuration settings. Setting either option to an empty
string clears the value.
.SS "Examples"
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.  sp -1
.  IP \(bu 2.3
.\}
\f(CRgit config lfs.fetchinclude "textures,images/foo*"\fP
.sp
This will only fetch objects referenced in paths in the textures folder,
and files called foo* in the images folder
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.  sp -1
.  IP \(bu 2.3
.\}
\f(CRgit config lfs.fetchinclude "\fB.jpg,\fP.png,*.tga"\fP
.sp
Only fetch JPG/PNG/TGA files, wherever they are in the repository
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.  sp -1
.  IP \(bu 2.3
.\}
\f(CRgit config lfs.fetchexclude "media/reallybigfiles"\fP
.sp
Don\(cqt fetch any LFS objects referenced in the folder
media/reallybigfiles, but fetch everything else
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.  sp -1
.  IP \(bu 2.3
.\}
\f(CRgit config lfs.fetchinclude "media"\fP
\f(CRgit config lfs.fetchexclude "media/excessive"\fP
.sp
Only fetch LFS objects in the \*(Aqmedia\*(Aq folder, but exclude those in one
of its subfolders.
.RE
.SH "DEFAULT REMOTE"
.sp
Without arguments, fetch downloads from the default remote. The default
remote is the same as for \f(CRgit fetch\fP, i.e. based on the remote branch
you\(cqre tracking first, or origin otherwise.
.SH "DEFAULT REFS"
.sp
If no refs are given as arguments, the currently checked out ref is
used. In addition, if enabled, recently changed refs and commits are
also included. See RECENT CHANGES for details.
.SH "RECENT CHANGES"
.sp
If the \f(CR\-\-recent\fP option is specified, or if the gitconfig option
\f(CRlfs.fetchrecentalways\fP is true, then after the current ref (or those in
the arguments) is fetched, we also search for \*(Aqrecent\*(Aq changes to fetch
objects for, so that it\(cqs more convenient to checkout or diff those
commits without incurring further downloads.
.sp
What changes are considered \*(Aqrecent\*(Aq is based on a number of gitconfig
options:
.sp
\f(CRlfs.fetchrecentrefsdays\fP
.RS 4
If non\-zero, includes branches which have
commits within N days of the current date. Only local refs are included
unless lfs.fetchrecentremoterefs is true. The default is 7 days.
.RE
.sp
\f(CRlfs.fetchrecentremoterefs\fP
.RS 4
If true, fetches remote refs (for the remote you\(cqre fetching) as well as local
refs in the recent window. This is useful to fetch objects for remote branches
you might want to check out later. The default is true; if you set this to
false, fetching for those branches will only occur when you either check them
out (losing the advantage of fetch \-\-recent), or create a tracking local
branch separately then fetch again.
.RE
.sp
\f(CRlfs.fetchrecentcommitsdays\fP
.RS 4
In addition to fetching at branches, also fetches changes made within N days
of the latest commit on the branch. This is useful if you\(cqre often reviewing
recent changes. The default is 0 (no previous changes).
.RE
.sp
\f(CRlfs.fetchrecentalways\fP
.RS 4
Always operate as if \-\-recent was provided on the command line.
.RE
.SH "EXAMPLES"
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.  sp -1
.  IP \(bu 2.3
.\}
Fetch the LFS objects for the current ref from default remote
.sp
\f(CRgit lfs fetch\fP
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.  sp -1
.  IP \(bu 2.3
.\}
Fetch the LFS objects for the current ref AND recent changes from
default remote
.sp
\f(CRgit lfs fetch \-\-recent\fP
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.  sp -1
.  IP \(bu 2.3
.\}
Fetch the LFS objects for the current ref from a secondary remote
\*(Aqupstream\*(Aq
.sp
\f(CRgit lfs fetch upstream\fP
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.  sp -1
.  IP \(bu 2.3
.\}
Fetch all the LFS objects from the default remote that are referenced
by any commit in the \f(CRmain\fP and \f(CRdevelop\fP branches
.sp
\f(CRgit lfs fetch \-\-all origin main develop\fP
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.  sp -1
.  IP \(bu 2.3
.\}
Fetch the LFS objects for a branch from origin
.sp
\f(CRgit lfs fetch origin mybranch\fP
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.  sp -1
.  IP \(bu 2.3
.\}
Fetch the LFS objects for 2 branches and a commit from origin
.sp
\f(CRgit lfs fetch origin main mybranch e445b45c1c9c6282614f201b62778e4c0688b5c8\fP
.RE
.SH "SEE ALSO"
.sp
git\-lfs\-checkout(1), git\-lfs\-pull(1), git\-lfs\-prune(1), gitconfig(5).
.sp
Part of the git\-lfs(1) suite.