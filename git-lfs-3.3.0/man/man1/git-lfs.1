'\" t
.\"     Title: git-lfs
.\"    Author: [see the "AUTHOR(S)" section]
.\" Generator: Asciidoctor 2.0.18
.\"    Manual: \ \&
.\"    Source: \ \&
.\"  Language: English
.\"
.TH "GIT\-LFS" "1" "" "\ \&" "\ \&"
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.ss \n[.ss] 0
.nh
.ad l
.de URL
\fI\\$2\fP <\\$1>\\$3
..
.als MTO URL
.if \n[.g] \{\
.  mso www.tmac
.  am URL
.    ad l
.  .
.  am MTO
.    ad l
.  .
.  LINKSTYLE blue R < >
.\}
.SH "NAME"
git-lfs \- Work with large files in Git repositories
.SH "SYNOPSIS"
.sp
\f(CRgit lfs\fP <command> [<args>]
.SH "DESCRIPTION"
.sp
Git LFS is a system for managing and versioning large files in
association with a Git repository. Instead of storing the large files
within the Git repository as blobs, Git LFS stores special "pointer
files" in the repository, while storing the actual file contents on a
Git LFS server. The contents of the large file are downloaded
automatically when needed, for example when a Git branch containing the
large file is checked out.
.sp
Git LFS works by using a "smudge" filter to look up the large file
contents based on the pointer file, and a "clean" filter to create a new
version of the pointer file when the large file\(cqs contents change. It
also uses a \f(CRpre\-push\fP hook to upload the large file contents to the Git
LFS server whenever a commit containing a new large file version is
about to be pushed to the corresponding Git server.
.SH "COMMANDS"
.sp
Like Git, Git LFS commands are separated into high level ("porcelain")
commands and low level ("plumbing") commands.
.SS "High level porcelain commands"
.sp
git\-lfs\-checkout(1)
.RS 4
Populate working copy with real content from Git LFS files.
.RE
.sp
git\-lfs\-dedup(1)
.RS 4
De\-duplicate Git LFS files.
.RE
.sp
git\-lfs\-env(1)
.RS 4
Display the Git LFS environment.
.RE
.sp
git\-lfs\-ext(1)
.RS 4
Display Git LFS extension details.
.RE
.sp
git\-lfs\-fetch(1)
.RS 4
Download Git LFS files from a remote.
.RE
.sp
git\-lfs\-fsck(1)
.RS 4
Check Git LFS files for consistency.
.RE
.sp
git\-lfs\-install(1)
.RS 4
Install Git LFS configuration.
.RE
.sp
git\-lfs\-lock(1)
.RS 4
Set a file as "locked" on the Git LFS server.
.RE
.sp
git\-lfs\-locks(1)
.RS 4
List currently "locked" files from the Git LFS server.
.RE
.sp
git\-lfs\-logs(1)
.RS 4
Show errors from the Git LFS command.
.RE
.sp
git\-lfs\-ls\-files(1)
.RS 4
Show information about Git LFS files in the index
and working tree.
.RE
.sp
git\-lfs\-migrate(1)
.RS 4
Migrate history to or from Git LFS
.RE
.sp
git\-lfs\-prune(1)
.RS 4
Delete old Git LFS files from local storage
.RE
.sp
git\-lfs\-pull(1)
.RS 4
Fetch Git LFS changes from the remote & checkout any required working tree
files.
.RE
.sp
git\-lfs\-push(1)
.RS 4
Push queued large files to the Git LFS endpoint.
.RE
.sp
git\-lfs\-status(1)
.RS 4
Show the status of Git LFS files in the working
tree.
.RE
.sp
git\-lfs\-track(1)
.RS 4
View or add Git LFS paths to Git attributes.
.RE
.sp
git\-lfs\-uninstall(1)
.RS 4
Uninstall Git LFS by removing hooks and smudge/clean filter configuration.
.RE
.sp
git\-lfs\-unlock(1)
.RS 4
Remove "locked" setting for a file on the Git LFS server.
.RE
.sp
git\-lfs\-untrack(1)
.RS 4
Remove Git LFS paths from Git Attributes.
.RE
.sp
git\-lfs\-update(1)
.RS 4
Update Git hooks for the current Git repository.
.RE
.sp
git\-lfs\-version(1)
.RS 4
Report the version number.
.RE
.SS "Low level plumbing commands"
.sp
git\-lfs\-clean(1)
.RS 4
Git clean filter that converts large files to pointers.
.RE
.sp
git\-lfs\-filter\-process(1)
.RS 4
Git process filter that converts between large files and pointers.
.RE
.sp
git\-lfs\-merge\-driver(1)
.RS 4
Merge text\-based LFS files
.RE
.sp
git\-lfs\-pointer(1)
.RS 4
Build and compare pointers.
.RE
.sp
git\-lfs\-post\-checkout(1)
.RS 4
Git post\-checkout hook implementation.
.RE
.sp
git\-lfs\-post\-commit(1)
.RS 4
Git post\-commit hook implementation.
.RE
.sp
git\-lfs\-post\-merge(1)
.RS 4
Git post\-merge hook implementation.
.RE
.sp
git\-lfs\-pre\-push(1)
.RS 4
Git pre\-push hook implementation.
.RE
.sp
git\-lfs\-smudge(1)
.RS 4
Git smudge filter that converts pointer in blobs to the actual content.
.RE
.sp
git\-lfs\-standalone\-file(1)
.RS 4
Git LFS standalone transfer adapter for file URLs (local paths).
.RE
.SH "EXAMPLES"
.sp
To get started with Git LFS, the following commands can be used.
.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.  sp -1
.  IP " 1." 4.2
.\}
Setup Git LFS on your system. You only have to do this once per user
account:
.sp
.if n .RS 4
.nf
.fam C
git lfs install
.fam
.fi
.if n .RE
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.  sp -1
.  IP " 2." 4.2
.\}
Choose the type of files you want to track, for examples all \f(CRISO\fP
images, with git\-lfs\-track(1):
.sp
.if n .RS 4
.nf
.fam C
git lfs track "*.iso"
.fam
.fi
.if n .RE
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.  sp -1
.  IP " 3." 4.2
.\}
The above stores this information in gitattributes(5) files, so that
file needs to be added to the repository:
.sp
.if n .RS 4
.nf
.fam C
git add .gitattributes
.fam
.fi
.if n .RE
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.  sp -1
.  IP " 4." 4.2
.\}
Commit, push and work with the files normally:
.sp
.if n .RS 4
.nf
.fam C
git add file.iso
git commit \-m "Add disk image"
git push
.fam
.fi
.if n .RE
.RE